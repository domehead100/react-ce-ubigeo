{"version":3,"sources":["store/context.ts","providers/main.tsx","utils/file-to-json.ts","lib/dragndrop.ts","lib/pragma.ts","components/uploader/index.tsx","containers/index.tsx","serviceWorker.ts","index.tsx","svg/cloud.svg"],"names":["context","React","createContext","ubigeo","setUbigeo","Provider","MainProider","_ref","children","_useState","useState","_useState2","Object","slicedToArray","providerValue","react_default","a","createElement","value","regex","_wrapRegExp","code","name","_callee","rawText","cb","lines","toReturn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_loop","_iterator","_step","regenerator_default","wrap","_context2","prev","next","replace","split","undefined","mark","line","_line$split","_line$split2","departmentGroup","provinceGroup","districtGroup","department","province","district","_department","_department2","_province2","_context","groupToData","sent","find","d","push","objectSpread","provinces","p","districts","_province","stop","Symbol","iterator","done","delegateYield","t1","return","finish","group","regexResult","exec","Promise","resolve","groups","fileToJson","file","type","Error","reader","FileReader","readAsText","onloadend","parseContent","this","result","dragndrop","onDragOver","e","preventDefault","transfer","dataTransfer","dropEffect","onDrop","stopPropagation","files","listeners","eventPattern","toKebabCase","str","toLowerCase","jsx","props","isCustomElement","customElements","get","newProps","ref","element","events","entries","filter","_ref2","k","match","map","_ref3","_ref4","v","defineProperty","complexProps","_ref6","_ref7","_ref8","_ref9","event","_Object$entries$","key","impl","eventName","Map","has","addEventListener","set","err","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","prop","_Object$entries$2","_len","arguments","length","Array","_key","apply","concat","Uploader","_useContext","useContext","Context","onFileDrop","asyncToGenerator","putInTable","_x","onFileSelect","_callee2","target","_x2","_callee3","dataJson","_context3","t0","alert","message","_x3","matchMedia","matches","id","onChange","htmlFor","className","DragnDrop","src","cloud","alt","keys","rows","App","main","components_uploader","Boolean","window","location","hostname","ReactDOM","render","src_containers","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.58ff4bc7.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react'\r\n\r\nexport interface MainContext {\r\n  ubigeo: Record<string, any>\r\n  setUbigeo: Dispatch<SetStateAction<{}>>\r\n}\r\n\r\nconst contextStructure: MainContext = {\r\n  ubigeo: {},\r\n  setUbigeo() {}\r\n}\r\n\r\nconst context = React.createContext(contextStructure)\r\n\r\nexport default context\r\n","import React, { SFC, useState } from 'react'\r\nimport context from '../store/context'\r\n\r\nconst Provider = context.Provider\r\n\r\nconst MainProider: SFC = function ({ children }) {\r\n  const [ubigeo, setUbigeo] = useState({})\r\n\r\n  const providerValue = { ubigeo, setUbigeo }\r\n\r\n  return (\r\n    <Provider value={providerValue}>\r\n      { children }\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default MainProider\r\n","export interface Department {\r\n  code: string\r\n  name: string\r\n  provinces: Province[]\r\n}\r\n\r\nexport interface Province {\r\n  code: string\r\n  name: string\r\n  districts: District[]\r\n}\r\n\r\nexport interface District {\r\n  code: string\r\n  name: string\r\n}\r\n\r\nexport interface Location {\r\n  code: string\r\n  name: string\r\n}\r\n\r\nconst regex= /(?<code>[0-9]+)\\s+(?<name>[a-zA-Z\\s]+)/\r\n\r\nfunction fileToJson(file: File): Promise<Record<string, any>> {\r\n  return new Promise((resolve) => {\r\n    if (file.type !== 'text/plain') {\r\n      throw new Error('Solo se permiten archivos de texto plano')\r\n    }\r\n    const reader = new FileReader()\r\n    reader.readAsText(file, 'utf-8')\r\n    reader.onloadend = function() {\r\n      parseContent(this.result as string, resolve)\r\n    }\r\n  })\r\n}\r\n\r\nasync function parseContent (rawText: string, cb: (data: Department[]) => void) {\r\n  const lines = rawText.replace(/\"/g, '').split('\\n')\r\n\r\n  const toReturn: Department[] = []\r\n\r\n  for (const line of lines) {\r\n    const [departmentGroup, provinceGroup, districtGroup] = line.split('/')\r\n\r\n    const department = await groupToData(departmentGroup)\r\n    const province = await groupToData(provinceGroup)\r\n    const district = await groupToData(districtGroup)\r\n\r\n    if (department) {\r\n      const hasDepartment = toReturn.find((d: Department) => d.code === department.code)\r\n      if (!hasDepartment) {\r\n        toReturn.push({\r\n          ...department,\r\n          provinces: []\r\n        })\r\n      }\r\n    }\r\n\r\n    if (department && province) {\r\n      const _department = toReturn.find((d: Department) => d.code === department.code) as Department\r\n      const _province = _department.provinces.find((p: Province) => p.code === province.code)\r\n      if (!_province) {\r\n        _department.provinces.push({\r\n          ...province,\r\n          districts: []\r\n        })\r\n      }\r\n    }\r\n\r\n    if (department && province && district) {\r\n      const _department = toReturn.find((d: Department) => d.code === department.code) as Department\r\n      const _province = _department.provinces.find((p: Province) => p.code === province.code) as Province\r\n      const _district = _province.districts.find((d: District) => d.code === district.code) as District\r\n\r\n      if (!_district) {\r\n        _province.districts.push(district)\r\n      }\r\n    }\r\n  }\r\n\r\n  cb(toReturn)\r\n}\r\n\r\nfunction groupToData(group: string): Promise<Location | null> {\r\n  const regexResult = regex.exec(group)\r\n\r\n  return new Promise((resolve) => {\r\n    if (regexResult) {\r\n      const { code, name } = regexResult.groups as Record<string, any>\r\n      const location: Location = { code, name }\r\n      resolve(location)\r\n    } else {\r\n      resolve(void 0)\r\n    }\r\n  })\r\n}\r\n\r\nexport default fileToJson\r\n","import React from 'react'\r\n\r\nexport default {\r\n  onDragOver(e: DragEvent | React.DragEvent<any>) {\r\n    e.preventDefault()\r\n    const transfer = e.dataTransfer\r\n    if (transfer) {\r\n      transfer.dropEffect = 'move'\r\n    }\r\n  },\r\n  onDrop(e: DragEvent | React.DragEvent<any>, cb: (data: File) => void) {\r\n    e.stopPropagation()\r\n    e.preventDefault()\r\n    const transfer = e.dataTransfer\r\n    if (transfer) {\r\n      const file: File = transfer.files[0]\r\n      cb(file)\r\n    }\r\n  }\r\n}\r\n","import React, { FunctionComponent, ReactChild } from 'react'\r\n\r\nconst listeners = Symbol('jsx-web-comp/event-listeners')\r\nconst eventPattern = /^onEvent/\r\n\r\nconst toKebabCase = (str: string) => str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase()\r\n\r\nexport default function jsx (type: string | FunctionComponent, props: Record<string, any>, ...children: ReactChild[]) {\r\n  const isCustomElement = customElements.get(type as string)\r\n  const newProps = { ...props }\r\n\r\n  if (typeof type === 'string' && isCustomElement) {\r\n    newProps.ref = (element: any) => {\r\n      if (element) {\r\n        if (props) {\r\n          /** Map custom events as objects (must have onEvent prefix) */\r\n          const events = Object.entries(props).filter(([k, v]) => k.match(eventPattern)).map(([k, v]) => ({ [k]: v }))\r\n          /** Get only the complex props (objects and arrays) */\r\n          const complexProps = Object.entries(props).filter(([k, v]) => typeof v === 'object').map(([k, v]) => ({ [k]: v }))\r\n\r\n          for (const event of events) {\r\n            const [key, impl] = Object.entries(event)[0]\r\n            const eventName = toKebabCase(\r\n              key.replace('onEvent', '')\r\n            ).replace('-', '')\r\n\r\n            /** Add the listeners Map if not present */\r\n            if (!element[listeners]) {\r\n              element[listeners] = new Map()\r\n            }\r\n            /** If the listener hasn't be attached, attach it */\r\n            if (!element[listeners].has(eventName)) {\r\n              element.addEventListener(eventName, impl)\r\n              /** Save a reference to avoid listening to the same value twice */\r\n              element[listeners].set(eventName, impl)\r\n              delete newProps[key]\r\n            }\r\n          }\r\n\r\n          for (const prop of complexProps) {\r\n            const [key, value] = Object.entries(prop)[0]\r\n            delete newProps[key] // remove the complex prop from props\r\n            element[key] = value\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return React.createElement.apply(null, [type, newProps, ...children])\r\n}\r\n","/** @jsx customElements */\r\nimport { SFC, useContext, ChangeEvent } from 'react'\r\nimport Context, { MainContext } from '../../store/context'\r\nimport fileToJson from '../../utils/file-to-json'\r\nimport DragnDrop from '../../lib/dragndrop'\r\nimport customElements from '../../lib/pragma'\r\nimport cloud from '../../svg/cloud.svg'\r\nimport './index.css'\r\n\r\nconst Uploader: SFC = function () {\r\n  const { ubigeo, setUbigeo }: MainContext = useContext(Context)\r\n\r\n  const onFileDrop = async function(file: File) {\r\n    putInTable(file)\r\n  }\r\n\r\n  const onFileSelect = async function (e: ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList | null = e.target.files\r\n    if (files) {\r\n      const file: File = files[0]\r\n      putInTable(file)\r\n    }\r\n  }\r\n\r\n  const putInTable = async function (file: File) {\r\n    try {\r\n      const dataJson = await fileToJson(file)\r\n      setUbigeo(dataJson)\r\n    } catch (e) {\r\n      alert(e.message)\r\n    }\r\n  }\r\n\r\n  const IS_DESKTOP = matchMedia('(min-width: 980px').matches\r\n  \r\n  if (IS_DESKTOP) {\r\n    return (\r\n      <div>\r\n        <input id=\"upload\" type=\"file\" onChange={onFileSelect} />\r\n        <label\r\n          htmlFor=\"upload\"\r\n          className=\"upload-area\"\r\n          onDragOver={DragnDrop.onDragOver}\r\n          onDrop={e => {\r\n            DragnDrop.onDrop(e, onFileDrop)\r\n          }}\r\n          >\r\n          <img src={cloud} alt=\"upload\" />\r\n          <p>Drop or click here to upload</p>\r\n        </label>\r\n        {\r\n          Object.keys(ubigeo).length ? (\r\n            <div>\r\n              <h3>Ubigeo Report</h3>\r\n              <ubigeo-table\r\n                rows={ubigeo}\r\n              />\r\n            </div>\r\n          ) : null\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input id=\"upload\" type=\"file\" onChange={onFileSelect} />\r\n      {\r\n        Object.keys(ubigeo).length ? (\r\n          <div>\r\n            <h3>Ubigeo Report</h3>\r\n            <ubigeo-table\r\n              rows={ubigeo}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <label htmlFor=\"upload\" className=\"upload-area\">\r\n            <img src={cloud} alt=\"upload\" />\r\n            <p>Click here to upload</p>\r\n          </label>\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Uploader\r\n","import React from 'react'\r\nimport MainProvider from '../providers/main'\r\nimport Uploader from '../components/uploader'\r\nimport './index.css'\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <MainProvider>\r\n      <div className=\"App\">\r\n        <Uploader />\r\n      </div>\r\n    </MainProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './containers'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","module.exports = __webpack_public_path__ + \"static/media/cloud.5b118caf.svg\";"],"sourceRoot":""}